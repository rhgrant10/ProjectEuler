"""Problem 12

Highly divisible triangular number
==================================

The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?

"""
from collections import Counter


def gen_primes(limit):
    is_prime = [True for _ in range(limit)]
    is_prime[:2] = [False, False]
    for i in range(2, limit):
        if is_prime[i]:
            for j in range(i + i, limit, i):
                is_prime[j] = False
    return [p for p, e in enumerate(is_prime) if e]


primes = gen_primes(100000)


def prime_factorization(n):
    if n % 2 == 0:  # Ignore one factor of 2.
        n /= 2
    if n in primes:
        return Counter({n: 1})
    c = Counter()
    for p in primes[:int(n // 2) + 1]:
        m, r = divmod(n, p)
        while r == 0:
            c[p] += 1
            m, r = divmod(m, p)
    return c


def num_divisors(n):
    product = 1
    for p, e in prime_factorization(n).items():
        product *= e + 1
    return product


def answer():
    n = 1
    left, right = map(num_divisors, [n, n + 1])
    while left * right < 500:   # Is missing one factor of 2, thus < not <=
        n += 1
        left, right = right, num_divisors(n + 1)
    return n * (n + 1) // 2     # Return actual triangle number.


if __name__ == '__main__':
    print(answer())
