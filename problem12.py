"""Problem 12

Highly divisible triangular number
==================================

The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?

"""

from collections import Counter

_is_prime = [False, False, True, True]

def is_prime(n):
    global _is_prime
    np = len(_is_prime)
    if n >= np:
        _is_prime += [True for i in range(n - np + 1)]
        for i in range(len(_is_prime)):
            if _is_prime[i]:
                for j in range(2 * i, len(_is_prime), i):
                    _is_prime[j] = False
    return _is_prime[n]

def prime_factorization(n):
    global _is_prime
    if is_prime(n):
        return Counter({n: 1})
    c = Counter()
    for p, d in enumerate(_is_prime[:n//2 + 1]):
        if not d:
            continue
        m, r = divmod(n, p)
        while r == 0:
            c[p] += 1
            m, r = divmod(m, p)
    return c

def num_divisors(n):
    factors = prime_factorization(n)
    product = 1
    for p, e in factors.items():
        product *= e + 1
    return product

import time

def answer():
    t = time.time()
    s = 0
    n = 0
    nd = 0
    mnd = 0
    while nd <= 500:
        n += 1
        s += n
        nd = num_divisors(s)
        if nd >= mnd:
            print('[{:12f}] {} has {}'.format(time.time() - t, s, nd))
            mnd = nd
    return s
        

if __name__ == '__main__':
    print(answer())
